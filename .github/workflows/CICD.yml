name: DaisoMall CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      # 도커 이미지 생성 후 이미지 push
      - name: Docker build & push to dev
        run: |
          docker login -u ${{ secrets.DOCKER_USER_NAME }} -p ${{ secrets.DOCKER_USER_TOKEN }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USER_NAME }}/daisomall  .
          docker push ${{ secrets.DOCKER_USER_NAME }}/daisomall

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SECRET_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SECRET_PEM }}

          envs: |
            RDB_URL=${{ secrets.RDB_URL }}
            RDS_USER_NAME=${{ secrets.RDS_USER_NAME }}
            RDS_USER_PW=${{ secrets.RDS_USER_PW }}
            SERVER_PORT=8080
            DOCKER_USER_NAME=${{ secrets.DOCKER_USER_NAME }}
          script: |
            set -euo pipefail
            
            APP=app
            IMAGE=${DOCKER_USER_NAME}/daisomall
            PORT=${SERVER_PORT}
          
            sudo docker pull $IMAGE
          
            if sudo docker ps -q -f name=$APP | grep -q .; then
              sudo docker stop $APP
              sudo docker rm  $APP
            fi
            
            sudo docker run -d --name $APP \
              -p $PORT:$PORT \
              -e SERVER_PORT=$PORT \
              -e TZ=Asia/Seoul \
              -e RDB_URL="$RDB_URL" \
              -e RDS_USER_NAME="$RDS_USER_NAME" \
              -e RDS_USER_PW="$RDS_USER_PW" \
              $IMAGE
            
            for i in {1..10}; do
              if curl -s -f "http://localhost:$PORT/health-check" >/dev/null; then
                break
              fi
              sleep 3
              if [ $i -eq 10 ]; then
                sudo docker logs $APP
                exit 1
              fi
            done
            
            # 5) Caddy reload
            sudo systemctl reload caddy
            
            # 6) Docker prune
            sudo docker image prune -a -f